// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/yume_audio.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class YumeAudioBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  YumeAudioBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  YumeAudioBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<Player> yume_audio_init(
    ffi.Pointer<ffi.Char> path,
  ) {
    return _yume_audio_init(
      path,
    );
  }

  late final _yume_audio_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<Player> Function(ffi.Pointer<ffi.Char>)>>(
      'yume_audio_init');
  late final _yume_audio_init = _yume_audio_initPtr
      .asFunction<ffi.Pointer<Player> Function(ffi.Pointer<ffi.Char>)>();

  void yume_audio_play(
    ffi.Pointer<Player> player,
  ) {
    return _yume_audio_play(
      player,
    );
  }

  late final _yume_audio_playPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Player>)>>(
          'yume_audio_play');
  late final _yume_audio_play =
      _yume_audio_playPtr.asFunction<void Function(ffi.Pointer<Player>)>();

  void yume_audio_set_pitch(
    ffi.Pointer<Player> player,
    double pitch,
  ) {
    return _yume_audio_set_pitch(
      player,
      pitch,
    );
  }

  late final _yume_audio_set_pitchPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<Player>, ffi.Float)>>(
      'yume_audio_set_pitch');
  late final _yume_audio_set_pitch = _yume_audio_set_pitchPtr
      .asFunction<void Function(ffi.Pointer<Player>, double)>();
}

final class _Player extends ffi.Opaque {}

typedef Player = _Player;
